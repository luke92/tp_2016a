#+TITLE: TP2: Clases genéricas y polimorfismo
#+AUTHOR: Programación II
#+DATE: Primer cuatrimestre 2016
#+LANGUAGE: es
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \setmainfont[Ligatures=TeX]{TeXGyrePagellaX}
#+LATEX_HEADER: \setmonofont[Scale=0.9]{Consolas}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{xleftmargin=2em}
#+LATEX_HEADER: \usepackage[spanish]{babel}
#+LATEX_HEADER: \usepackage[parfill]{parskip}
#+LATEX_HEADER: \hypersetup{colorlinks,linkcolor=red,urlcolor=blue}
#+OPTIONS: html-postamble:nil
#+OPTIONS: ^:nil toc:nil H:3 num:2 timestamp:nil
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/org.css">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/org-solarized.css">
#+LINK: src https://github.com/ungs-prog2/tp_2016a/tree/gh-pages/TP2/src/%s
#+LINK: gh https://github.com/ungs-prog2/tp_2016a

La fecha de entrega de este TP es el *16 de junio de 2016*. Se puede realizar de
manera individual, o en grupos de a lo sumo dos personas.

El TP consta de dos partes, que se entregarán de manera conjunta en un único
ZIP con el código Java, respetando la estructura del proyecto de Eclipse que se
proporciona como parte de la consigna.

El proyecto de Eclipse se puede descargar desde [[gh:/releases][esta página]].


* Parte 1: Estructuras de datos genéricas
:PROPERTIES:
:UNNUMBERED: t
:CUSTOM_ID: parte1
:END:

En esta parte se pide implementar un diccionario conforme a una
interfaz pre-determinada, empleando un TAD Conjunto como soporte.

Como parte de la consigna *se proporciona*:

  - la definición de la [[#diccionario][interfaz /Diccionario/]].
  - la implementación de la [[#conjunto][clase /Conjunto/]].

Y *se pide*:

  - la implementación de la clases [[#dicc-conjunto][/DiccConjunto/ y /TuplaDic/]].

Se incluye también una [[#guia1][guía de implementación]].


** La interfaz /Diccionario/
:PROPERTIES:
:CUSTOM_ID: diccionario
:END:

La interfaz pública /Diccionario/ define cinco operaciones con dos tipos
paramétricos (la clave /K/ y el valor /V):/

#+BEGIN_SRC java
public interface Diccionario<K, V>
{
    void guardar(K clave, V valor);

    V obtener(K clave);

    boolean pertenece(K clave);

    void eliminar(K clave);

    int tamaño();
}
#+END_SRC

La documentación de cada método se incluye en el archivo [[src:parte1/Diccionario.java][Diccionario.java]].

No se permite realizar ningún cambio a esta interfaz.


** La clase /Conjunto/
:PROPERTIES:
:CUSTOM_ID: conjunto
:END:

Se incluye la implementación de un /Conjunto/ genérico con el tipo paramétrico /T/
(el tipo del elemento):

#+BEGIN_SRC java
class Conjunto<T extends Comparable<T>>
{
    void agregar(T elem)       { /* ya implementado */ }

    boolean pertenece(T elem)  { /* ya implementado */ }

    void quitar(T elem)        { /* ya implementado */ }

    T recuperar(T elem)        { /* ya implementado */ }
}
#+END_SRC

De la definición de la clase se deduce que los elementos del conjunto deben ser
*comparables entre sí*.

La documentación de cada método se incluye en el archivo [[src:parte1/Conjunto.java][Conjunto.java]].

Se proporciona la implementación completa de la clase. No se pueden realizar
alteraciones, ni agregar métodos adicionales. En particular, nótese que, de
manera intencional, este Conjunto no proporciona el método /tamaño()/.


** /DiccConjunto/ y /TuplaDic/
:PROPERTIES:
:CUSTOM_ID: dicc-conjunto
:END:

La clase /DiccConjunto/ debe implementar la interfaz /Diccionario/
sobre el TAD /Conjunto/.

Como el número de tipos paramétricos difiere entre estas dos clases, será
necesario usar un TAD intermedio que actúe como puente entre /Conjunto<T>/ y
/DiccConjunto<K, V>/.

Se recomienda usar /TuplaDic<K, V>/ como TAD intermedio. Es una tupla de dos
elementos en la que la comparación se realiza solamente por el primero de ellos
(en este caso la clave).

Archivos a completar:

  - [[src:parte1/TuplaDic.java][TuplaDic.java]]: implementar =toString()=, =equals()= y =compareTo()=.

  - [[src:parte1/DiccConjunto.java][DiccConjunto.java]]: implementar =guardar()=, =obtener()=, =pertenece()= =tamaño()= y
    =eliminar()=.

*** Guía de implementación
:PROPERTIES:
:CUSTOM_ID: guia1
:END:

1. La idea es emplear un conjunto cuyos elementos sean tuplas
   =(clave, significado)=. Es decir, instanciar *dentro de
   DiccConjunto* un conjunto cuyo tipo paramétrico sea /TuplaDic<K,
   V>/. Así:

   #+BEGIN_SRC java
   /**
    ,* Conjunto privado que DiccConjunto usa para almacenar
    ,* sus parejas (clave, significado).
    ,*/
   private Conjunto<TuplaDic<K, V>> elementos;
   #+END_SRC

2. Para que esto funcione, el /equals()/ y /compareTo()/ de la tupla
   deben fijarse solamente en el primer elemento (la clave). Así,
   se puede realizar una búsqueda dentro del conjunto con una
   tupla =(clave, null)=.

3. Como no hay /Conjunto.tamaño()/, /DiccConjunto/ deberá llevar la
   cuenta de su número de elementos. Para ello, necesitará una
   variable de instancia /numElementos/ que será incrementada en
   /guardar()/ y decrementada en /eliminar()/.

   Puede ocurrir, no obstante que un elemento a guardar ya exista,
   y por tanto simplemente se reemplace; en ese caso no se debe
   incrementar /numElementos/. Algo similar ocurre con /eliminar()/ y
   elementos que no existen.

   Ambos casos se pueden solucionar usando /pertenece()/ antes de
   modificar el valor de /numElementos/.

* Parte 2: Polimorfismo y desacoplamiento
:PROPERTIES:
:UNNUMBERED: t
:CUSTOM_ID: parte2
:END:

En esta segunda parte se pide la refactorización de una clase haciendo uso de
polimorfismo como mecanismo para desacoplar componentes.

En otras palabras: se tiene una clase con un único método, demasiado largo, que
se desea descomponer en módulos distintos (clases), cada uno de las cuales se
encargue de una pequeña parte de la tarea global.

*Importante*: los cambios a realizar son simplemente de reorganización de código.
Tras los cambios, el comportamiento del programa debe seguir siendo el mismo.
Por ejemplo, los archivos /clientes.csv/ y /empleados.json/ que resultan de
ejecutar =main()= deben resultar idénticos tras los cambios.

** La clase /BDExport/

La clase a restructurar se llama =BDExport=, y se ocupa de exportar una lista de
objetos a un archivo, en un determinado formato. Se proporciona una clase [[src:parte2/Main.java][Main]]
que muestra su uso:

#+BEGIN_SRC java
public static void main(String[] args) {
    // Exportar una lista de clientes a CSV.
    BDExport.export("clientes.csv",
                    Formato.CSV, listaClientes());

    // Exportar una lista de empleados a JSON.
    BDExport.export("empleados.json",
                    Formato.JSON, listaEmpleados());
}
#+END_SRC

Esta es la documentación y la firma del método =export()= ya implementado:

#+BEGIN_SRC java
/**
 ,* Exporta una serie de objetos de la base de datos a un archivo.
 ,*
 ,* Recibe el nombre del archivo, el formato deseado (CSV o JSON),
 ,* y la lista de objetos (empleados o clientes).
 ,*/
public static void export(
        String archivo, Formato formato, List<?> objetos)
{
    // 70 líneas de código para...:
    //
    // Abrir el archivo
    // Determinar el tipo del objeto (!)
    // Extraer los atributos según la clase a exportar (!)
    // Exportar a CSV o JSON, con varios switch/if/else combinados (!)
    // Capturar excepciones e imprimir a System.err (!)
}
#+END_SRC

A lo que se quiere llegar es a un código más elegante y extensible que permita,
en el futuro, (a) agregar nuevos formatos y (b) tipos de objetos sin tener que
modificar su código.

Ver [[src:parte2/BDExport.java][BDExport.java]].


** Sugerencia de diseño

El diseño de la la solución es libre, pero a continuación se detalla un posible
diseño. El alumno puede decidir seguirlo en su totalidad, o en parte; o
implementar un diseño propio desde cero.

En términos generales, Se sugiere el uso de una clase abstracta /Exportador/ (o
cualquier otro nombre) y una interfaz /Exportable/ (ídem) tal que el código de
=export()= quede como sigue:

#+BEGIN_SRC java
public static void export(Exportador exporter,
                          Iterable<? extends Exportable> objetos)
{
    for (Exportable e : objetos) {
        Atributos attrs = e.extraerAttributos();
        exporter.guardarCampos(attrs);
    }
}
#+END_SRC

Y la nueva función =main()=:

#+BEGIN_SRC java
public static void main(String[] args)
{
    try {
        FormatWriter csv = new ExportadorCSV("clientes.csv");
        FormatWriter json = new ExportadorJSON("empleados.json");
        BDExport.export(csv, listaClientes());
        BDExport.export(json, listaEmpleados());
    } catch (IOException e) {
        System.err.println("No se pudo realizar la copia de seguridad");
    }
}
#+END_SRC

*** La interfaz /Exportable/

En lugar de dejar que /BDExport/ “averigüe” el tipo de cada objeto a exportar, y
extraiga sus atributos con un cast, los propios objetos deberían saber
exportarse a sí mismos.

Esto lo pueden conseguir mediante la interfaz sugerida /Exportable:/

#+BEGIN_SRC java
public interface Exportable
{
    /**
     ,* Devuelve los atributos de la instancia en un diccionario.
     ,*
     ,* En esta versión simplificada, los valores siempre son
     ,* strings (ver clase Atributos).
     ,*/
    Atributos extraerAttributos();
}
#+END_SRC

Así, se deberían modificar las clases [[src:parte2/Cliente.java][Cliente]] y [[src:parte2/Empleado.java][Empleado]] para que implementen
esta interfaz.

*** La clase /Exportador/ y sus subclases

La clase abstracta /Exportador/ abstrae el concepto de serializar, en cualquier
formato, los atributos de un objeto:

#+BEGIN_SRC java
public abstract class Exportador
{
    public abstract void guardarCampos(Atributos attrs);
}
#+END_SRC

De aquí se pueden derivar los exportadores para CSV y JSON.

También se puede valorar introducir una clase abstracta intermedia,
/ExportadorArchivo/, que contenga el código común para la apertura de archivos
(usado por ambos exportadores).

*Nota final*: =export()= ya contiene el código para exportar a CSV y JSON. No es
necesario, por tanto, saber implementar estos formatos, pero se puede obtener
una noción general consultando, por ejemplo, Wikipedia: [[https://es.wikipedia.org/wiki/CSV][CSV]], [[https://es.wikipedia.org/wiki/JSON#Ejemplo_de_JSON][JSON]].



